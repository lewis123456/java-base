《深入理解Java虚拟机——Java高级特性与最佳实践》

Java运行时数据区域
线程私有：程序计数器，虚拟机栈，本地方法栈
线程公有：堆，方法区，执行引擎，本地方法接口，本地方法库

虚拟机栈：为虚拟机执行java方法，局部变量表，可能会抛出StackOverfloweError，OutOfMemoryError
本地方法栈：使虚拟机使用Native方法服务
java堆：虚拟机启动时创建，分代收集算法，eden, from survivor, to survivor，逻辑连续

方法区：类信息，常量，静态变量，即时编译后的代码，永久代，运行时常量池，String的intern方法

由String的intern方法而引申的
1 通过字面值赋值给字符串时，会先判断该字面值是否在常量池中，如果在就返回常量池中该字面值的引用，
否则先在常量池中添加该字符串然后返回引用
2 String的intern方法相当于返回字符串在常量池中的引用，如果之前不存在则添加，存在则直接返回
3 new String都是在堆上创建
4 常量字符串的+在编译阶段会被合成为一个字符串
5 对于final字段，在编译阶段就进行了常量替换
6 常量字符串和变量拼接时，会调用StringBuilder.append()在堆上创建新变量
7 JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，
这一点与之前没有区别，区别在于，如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，
而只是在常量池中生成一个对原字符串的引用。简单的说，就是往常量池放的东西变了：原来在常量池中找不到时，
复制一个副本放到常量池，1.7后则是将在堆上的地址引用复制到常量池。

直接内存：Java的NIO，基于通道和缓冲区的I/O方式，使用本地函数库直接分配堆外内存

java采用分代收集算法，新生代和老年代。新生代由eden, from survivor, to survivor三部分组成，
其内存大小的比例是8:1:1。新生代常使用复制算法进行垃圾收集，分配内存时在eden和from survivor进行
分配，垃圾收集时将eden和from survivor中仍然存活的对象复制到to survivor。交换from survivor和
to survivor，保证to survivor始终为空。（eden区的对象都会复制到survivor to，但是survivor from
中的对象会根据年龄分配到survivor to或者直接进入老年代）。多次进行minor gc后，survivor to区被填满后，
会将对象都转移到老年代。老年代一般使用标记整理算法。
minor gc触发的条件：eden区满了
full gc触发条件：
  a 调用system.gc
  b 老年代空间不足
  c 方法区空间不足
  d 通过minor gc进入老年代的平均大小大于老年代的可用内存
  e 由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，
  则把该对象转存到老年代，且老年代的可用内存小于该对象大小

CMS
G1
gc的各种组合

